<!--
    Copyright (c) 2022 All project authors and nebula-contrib. All rights reserved.

    This source code is licensed under Apache 2.0 License.
-->
<!DOCTYPE mapper SYSTEM "https://nebula-contrib.github.io/ngbatis/ngbatis-mapper.dtd" >
<mapper namespace="org.nebula.contrib.ngbatis.proxy.NebulaDaoBasic">

    <!--region query zoom-->
    <select id="selectById">
        match (n) where id(n) == ${ ng.valueFmt( id ) } return n
    </select>

    <select id="selectByIds">
        match (n: `${ ng.tagName( ng_args[0], ng_cm ) }`)
        where id(n) in [ ${ ng.join( @ids, ", ", "ng.valueFmt" ) } ]
        return n
    </select>
    
    <select id="selectBySelective">
        @var kv = ng.kv( ng_args[0], '', true, true, false );
        @var id = ng.id( ng_args[0], true, false );
        @var pkName = ng.pkName( ng_args[0] );
        @var tagName = ng.tagName( ng_args[0] );
        MATCH (n:`${ tagName }`)
        WHERE 1 == 1 ${ isNotEmpty( id ) ? ('\n                and id(n) == $' + pkName) : '' }
        @if ( isNotEmpty( @kv.columns ) ) {
            @for ( col in @kv.columns ) {
                and n.`${ tagName }`.${ col } == $${ @kv.valueNames.get( colLP.index - 1 ) }
            @}
        @}
        RETURN n
        LIMIT 4000
    </select>

    <select id="selectBySelectiveStringLike">
        @var kv = ng.kv( ng_args[0], '', true, true, false );
        @var id = ng.id( ng_args[0], true, false );
        @var pkName = ng.pkName( ng_args[0] );
        @var tagName = ng.tagName( ng_args[0] );
        MATCH (n:`${ tagName }`)
        WHERE 1 == 1 ${ isNotEmpty( id ) ? ('\n                and id(n) == $' + pkName) : '' }
        @if ( isNotEmpty( @kv.columns ) ) {
            @for ( col in @kv.columns ) {
                and n.`${ tagName }`.${ col } ${ 
                    ng.ifStringLike(
                        @kv.values.get( colLP.dataIndex ),
                        @kv.types.get( colLP.dataIndex ),
                        @kv.valueNames.get( colLP.dataIndex )
                    )
                }
            @}
        @}
        RETURN n
        LIMIT 4000
    </select>
    
    <select id="selectIdBySelective">
        @var kv = ng.kv( ng_args[0], '', true, true, false );
        @var id = ng.id( ng_args[0], true, false );
        @var pkName = ng.pkName( ng_args[0] );
        @var tagName = ng.tagName( ng_args[0] );
        MATCH (n:`${ tagName }`)
        WHERE 1 == 1 ${ isNotEmpty( id ) ? ('\n                and id(n) == $' + pkName) : '' }
        @if ( isNotEmpty( @kv.columns ) ) {
            @for ( col in @kv.columns ) {
                and n.`${ tagName }`.${ col } == $${ @kv.valueNames.get( colLP.index - 1 ) }
            @}
        @}
        RETURN id(n)
        LIMIT 4000
    </select>

    <select id="selectIdBySelectiveStringLike">
        @var kv = ng.kv( ng_args[0], '', true, true, false );
        @var id = ng.id( ng_args[0], true, false );
        @var pkName = ng.pkName( ng_args[0] );
        @var tagName = ng.tagName( ng_args[0] );
        MATCH (n:`${ tagName }`)
        WHERE 1 == 1 ${ isNotEmpty( id ) ? ('\n                and id(n)' + ng.ifStringLike( id )) : '' }
        @if ( isNotEmpty( @kv.columns ) ) {
            @for ( col in @kv.columns ) {
            and n.`${ tagName }`.${ col } ${ 
                    ng.ifStringLike(
                        @kv.values.get( colLP.dataIndex ),
                        @kv.types.get( colLP.dataIndex ),
                        @kv.valueNames.get( colLP.dataIndex )
                    )
                }
            @}
        @}
        RETURN id(n)
        LIMIT 4000
    </select>

    <select id="selectByMap">
        @var kv = ng.kv( ng_args[0], '', true, true, false );
        @var tagName = ng.tagName( ng_args[0], ng_cm );
        MATCH (n:`${ tagName }`)
        WHERE 1 == 1
        @if ( isNotEmpty( @kv.columns ) ) {
            @for ( col in @kv.columns ) {
                and n.`${ tagName }`.${ col } == $${ @kv.valueNames.get( colLP.dataIndex ) }
            @}
        @}
        RETURN n
        LIMIT 4000
    </select>

    <select id="countByMap">
        @var kv = ng.kv( ng_args[0], '', true, true, false );
        @var tagName = ng.tagName( ng_args[0], ng_cm );
        MATCH (n:`${ tagName }`)
        WHERE 1 == 1
        @if ( isNotEmpty( @kv.columns ) ) {
            @for ( col in @kv.columns ) {
                and n.`${ tagName }`.${ col } == $${ @kv.valueNames.get( colLP.dataIndex ) }
            @}
        @}
        RETURN count(n)
    </select>

    <select id="selectPage">
        @var query = @ng_args[0].getEntity();
        @var kv = ng.kv( query, 'entity', false, true, false );
        @var tag = ng.tagName( query, ng_cm );
        MATCH (n:${ tag })
        @if ( isNotEmpty( @kv.columns ) ) {
        WHERE
            @for ( col in @kv.columns ) {
                n.`${ tag }`.${ col } == $${ @kv.valueNames.get( colLP.index - 1 ) } ${ !colLP.last ? 'and' : '' }
            @}
        @}
        RETURN n skip $startRow limit $pageSize
    </select>

    <select id="countPage">
        @var query = @ng_args[0].getEntity();
        @var kv = ng.kv( query, 'entity', false, true, false );
        @var tag = ng.tagName( query, ng_cm );
        MATCH (n:${ tag })
        @if ( isNotEmpty( @kv.columns ) ) {
        WHERE
            @for ( col in @kv.columns ) {
                n.`${ tag }`.${ col } == $${ @kv.valueNames.get( colLP.index - 1 ) } ${ !colLP.last ? 'and' : '' }
            @}
        @}
        RETURN count(n)
    </select>
    <!--endregion-->

    <!--region insert zoom-->
    <insert id="insert">
        @var kv = ng.kv( ng_args[0] );
        @var id = ng.id( ng_args[0] );
        INSERT VERTEX IF NOT EXISTS 
        @for ( entry in @kv.multiTagColumns ) {
            `${ entry.key }` (
                ${ ng.join( entry.value, ", ", "ng.schemaFmt" ) }
            ) ${ entryLP.last ? '' : ','}
        @}
        VALUES ${ id } : (
            ${ ng.join( @kv.values ) }
        );
    </insert>

    <insert id="insertSelective">
        @var kv = ng.kv( ng_args[0], '', true, true );
        @var id = ng.id( ng_args[0] );
        INSERT VERTEX IF NOT EXISTS
        @for ( entry in @kv.multiTagColumns ) {
            `${ entry.key }` (
                ${ ng.join( entry.value, ", ", "ng.schemaFmt" ) }
            ) ${ entryLP.last ? '' : ','}
        @}
        VALUES ${ id } : (
            ${ ng.join( @kv.values ) }
        );
    </insert>

    <insert id="insertBatch">
        @for ( row in ng_args[0] ) {
            @var kv = ng.kv( row );
            @var id = ng.id( row );
            @if (rowLP.first) {
            INSERT VERTEX IF NOT EXISTS
            @for ( entry in @kv.multiTagColumns ) {
                `${ entry.key }` (
                    ${ ng.join( entry.value, ", ", "ng.schemaFmt" ) }
                ) ${ entryLP.last ? '' : ','}
            @}
            VALUES 
            @}
            ${ id } : ( ${ ng.join( @kv.values ) } ) ${ rowLP.last ? '' : ', ' }
        @}
    </insert>
    <!--endregion-->
    
    <!--region update zoom -->
    <update id="updateById">
        @var kv = ng.kv( ng_args[0] );
        @var id = ng.id( ng_args[0] );
        @var pkName = ng.pkName( ng_args[0] );
        @var tagName = ng.tagName( ng_args[0] );
        @var fields = ng.fieldNames( ng_args[0] );
        @for ( entry in @kv.multiTagColumns ) {
            UPDATE  VERTEX ON `${ entry.key }` ${ id }
            SET
                @for (col in entry.value ) {
                    @var vIdx = @kv.columns.indexOf( col );
                    @var val = @kv.values.get(@vIdx);
                    `${ col }` = ${ nvl(val, "null") } ${ colLP.last ? '' : ','}
                @}
            ;
        @}
    </update>

    <update id="updateByIdSelective">
        @var kv = ng.kv( ng_args[0],  '', true, true );
        @var id = ng.id( ng_args[0] );
        @var pkName = ng.pkName( ng_args[0] );
        @var tagName = ng.tagName( ng_args[0] );
        @var fields = ng.fieldNames( ng_args[0] );
        @for ( entry in @kv.multiTagColumns ) {
            UPDATE  VERTEX ON `${ entry.key }` ${ id }
            SET
            @for (col in entry.value ) {
                @var vIdx = @kv.columns.indexOf( col );
                @var val = @kv.values.get(@vIdx);
                `${ col }` = ${ nvl(val, "null") } ${ colLP.last ? '' : ','}
            @}
            ;
        @}
    </update>

    <update id="updateByIdBatchSelective">
        @for ( row in ng_args[0] ) {
            @var kv = ng.kv( row,  '', true, true );
            @var id = ng.id( row );
            @var pkName = ng.pkName( row );
            @var tagName = ng.tagName( row );

            @for ( entry in @kv.multiTagColumns ) {
                UPDATE  VERTEX ON `${ entry.key }` ${ id }
                SET
                @for (col in entry.value ) {
                    @var vIdx = @kv.columns.indexOf( col );
                    @var val = @kv.values.get(@vIdx);
                    `${ col }` = ${ nvl(val, "null") } ${ colLP.last ? '' : ','}
                @}
                ;
            @}
        @}
    </update>

    <update id="upsertByIdSelective">
        @var kv = ng.kv( ng_args[0],  '', true, true );
        @var id = ng.id( ng_args[0] );
        @var pkName = ng.pkName( ng_args[0] );
        @var tagName = ng.tagName( ng_args[0] );
        @var fields = ng.fieldNames( ng_args[0] );

        @for ( entry in @kv.multiTagColumns ) {
            UPSERT  VERTEX ON `${ entry.key }` ${ id }
            SET
            @for (col in entry.value ) {
                @var vIdx = @kv.columns.indexOf( col );
                @var val = @kv.values.get(@vIdx);
                `${ col }` = ${ nvl(val, "null") } ${ colLP.last ? '' : ','}
            @}
            ;
        @}
    </update>
    <!--endregion-->
    
    <!--region delete zoom-->
    <delete id="deleteLogicById">
    </delete>

    <delete id="deleteWithEdgeById">
        DELETE VERTEX ${ ng.valueFmt( p0 ) } WITH EDGE
    </delete>

    <delete id="deleteById">
        DELETE VERTEX ${ ng.valueFmt( p0 ) }
    </delete>
    <!--endregion-->
    <delete id="deleteByIdBatch">
        @for ( v in ng_args[0] ) {
            DELETE VERTEX ${ ng.valueFmt( v )};
        @}
    </delete>
    <!--region graph special-->
    <insert id="insertEdge">
        @var kv = ng.kv( ng_args[1], '', null, null, false );
        @var vId1 = ng.id( ng_args[0] );
        @var rank = ng.id( ng_args[1], false );
        @var vId2 = ng.id( ng_args[2] );
        @var e = ng.tagName( ng_args[1] );
        INSERT EDGE `${ e }` (
            ${ ng.join( @kv.columns, ", ", "ng.schemaFmt" ) }
        )
        VALUES ${ vId1 }-> ${ vId2 } ${ isNotEmpty( rank ) ? ('@' + rank) : ''  } :(
            ${ ng.join( @kv.values ) }
        );
    </insert>

    <insert id="insertEdgeSelective">
        @var kv = ng.kv( ng_args[1], '', null, true, false );
        @var vId1 = ng.id( ng_args[0] );
        @var rank = ng.id( ng_args[1], false );
        @var vId2 = ng.id( ng_args[2] );
        @var e = ng.tagName( ng_args[1] );

        INSERT EDGE `${ e }` (
        ${ ng.join( @kv.columns, ", ", "ng.schemaFmt" ) }
        )
        VALUES ${ vId1 }-> ${ vId2 } ${ isNotEmpty( rank ) ? ('@' + rank) : ''  } :(
        ${ ng.join( @kv.values ) }
        );
    </insert>
    <insert id="insertEdgeBatch">
        @for ( row in ng_args[0] ) {
        @var kv = ng.kv( row.edge, '', null, null, false );
        @var vId1 = ng.id( row.startNode);
        @var rank = ng.id( row.edge, false );
        @var vId2 = ng.id( row.endNode );
        @var e = ng.tagName( row.edge );
        INSERT EDGE `${ e }` (
        ${ ng.join( @kv.columns, ", ", "ng.schemaFmt" ) }
        )
        VALUES ${ vId1 }-> ${ vId2 } ${ isNotEmpty( rank ) ? ('@' + rank) : ''  } :(
        ${ ng.join( @kv.values ) }
        );
        @}
    </insert>
    <insert id="upsertEdgeSelective">
        @var kv = ng.kv( ng_args[1], '', null, true, false );
        @var rank = ng.id( ng_args[1] );
        @var tagName = ng.tagName( ng_args[1] );
        @var vId1 = ng.id( ng_args[0] );
        @var vId2 = ng.id( ng_args[2] );

        UPSERT EDGE ON `${ tagName }`
        ${ vId1 }-> ${ vId2 } ${ isNotEmpty( rank ) ? ('@' + rank) : ''  }
        @if ( isNotEmpty( @kv.columns ) ) {
        SET
        @for ( col in @kv.columns ) {
        @var val = @kv.values.get(colLP.dataIndex);
        `${ col }` = ${ val } ${ colLP.last ? '' : ',' }
        @}
        @}
    </insert>

    <select id="existsEdge">
        MATCH (n)-[r: ${ p1 }]-(n2)
        WHERE id(n) == $p0 AND id(n2) == $p2
        RETURN count(*) > 0
    </select>

    <select id="listStartNodes">
        MATCH (n: `${ p0 }`)-[r: `${ p1 }`]->(n2)
        WHERE id(n2) == $p2
        RETURN n
    </select>

    <select id="startNode">
        MATCH (n: `${ p0 }`)-[r: `${ p1 }`]->(n2)
        WHERE id(n2) == $p2
        RETURN n
        LIMIT 1
    </select>
    
    <select id="shortestPath" resultType="org.nebula.contrib.ngbatis.models.data.NgPath">
        @var srcId = ng.valueFmt( srcId );
        @var dstId = ng.valueFmt( dstId );
        FIND SHORTEST PATH FROM ${ srcId } TO ${ dstId } OVER * YIELD path AS p
    </select>
    <!--endregion-->

</mapper>